#summary This page describes how coroutines instrumentation layer works
#labels Featured

<wiki:toc max_depth="2" />

= Introduction =

Coroutines instrumentation uses excellent [http://asm.ow2.org/ ASM] library. 

Instrumentation is done in two phases. The first one is carried out to determine which methods in a class being loaded are marked as coroutines. It is fired for every loaded class if _runtime_ option is specified or for user specified classes only. It discovers instances of `Coroutine` annotation and marks which methods are annotated and need to be instrumented. It also performs basic sanity checks to see whether method is suitable to become coroutine: it must return `CoIterator` and not be abstract. If no such methods are found in the class there is no more work for the agent and it submits class unchanged to JVM runtime.
If any coroutine method is discovered the second phase begins. In this phase coroutine semantics are added to method(s) and `CoIterator` implementation(s) bound to coroutines are created.

= Coroutine methods =

All methods marked as coroutines in the previous phase are processed one by one. Processing starts with generating new public and final method which name is mangled original method name, so that no name collisions occur. The new method always returns an object and takes three formal arguments: `Frame` and two `Objects`. `mr.go.coroutines.core.Frame` is container in which coroutine execution state is hold (local variables value and operand stack contents) along with an integer saying where to jump on _next_/_send_ (it is -1 for closed coroutine, 0 for the first execution, 1 for the first _yield_ in method code, and so on). It also keeps names of local variables and line of code where recent yield took place for debugging purposes. To make use of this information your code has to be compiled with debug support and agent `debug` option needs to be turned on. 



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages